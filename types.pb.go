// Code generated by protoc-gen-go.
// source: types.proto
// DO NOT EDIT!

/*
Package gnoi is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	HashType
	Path
	PathElem
	Credentials
*/
package gnoi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Generic Layer 3 Protocol enumeration.
type L3Protocol int32

const (
	L3Protocol_UNSPECIFIED L3Protocol = 0
	L3Protocol_IPV4        L3Protocol = 1
	L3Protocol_IPV6        L3Protocol = 2
)

var L3Protocol_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "IPV4",
	2: "IPV6",
}
var L3Protocol_value = map[string]int32{
	"UNSPECIFIED": 0,
	"IPV4":        1,
	"IPV6":        2,
}

func (x L3Protocol) String() string {
	return proto.EnumName(L3Protocol_name, int32(x))
}
func (L3Protocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HashType_HashMethod int32

const (
	HashType_UNSPECIFIED HashType_HashMethod = 0
	HashType_SHA256      HashType_HashMethod = 1
	HashType_SHA512      HashType_HashMethod = 2
	HashType_MD5         HashType_HashMethod = 3
)

var HashType_HashMethod_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "SHA256",
	2: "SHA512",
	3: "MD5",
}
var HashType_HashMethod_value = map[string]int32{
	"UNSPECIFIED": 0,
	"SHA256":      1,
	"SHA512":      2,
	"MD5":         3,
}

func (x HashType_HashMethod) String() string {
	return proto.EnumName(HashType_HashMethod_name, int32(x))
}
func (HashType_HashMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// HashType defines the valid hash methods for data verification.  UNSPECIFIED
// should be treated an error.
type HashType struct {
	Method HashType_HashMethod `protobuf:"varint,1,opt,name=method,enum=gnoi.HashType_HashMethod" json:"method,omitempty"`
	Hash   []byte              `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *HashType) Reset()                    { *m = HashType{} }
func (m *HashType) String() string            { return proto.CompactTextString(m) }
func (*HashType) ProtoMessage()               {}
func (*HashType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HashType) GetMethod() HashType_HashMethod {
	if m != nil {
		return m.Method
	}
	return HashType_UNSPECIFIED
}

func (m *HashType) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// Path encodes a data tree path as a series of repeated strings, with
// each element of the path representing a data tree node name and the
// associated attributes.
// Reference: gNMI Specification Section 2.2.2.
type Path struct {
	Origin string      `protobuf:"bytes,2,opt,name=origin" json:"origin,omitempty"`
	Elem   []*PathElem `protobuf:"bytes,3,rep,name=elem" json:"elem,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Path) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *Path) GetElem() []*PathElem {
	if m != nil {
		return m.Elem
	}
	return nil
}

// PathElem encodes an element of a gNMI path, along with any attributes (keys)
// that may be associated with it.
// Reference: gNMI Specification Section 2.2.2.
type PathElem struct {
	Name string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key  map[string]string `protobuf:"bytes,2,rep,name=key" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PathElem) Reset()                    { *m = PathElem{} }
func (m *PathElem) String() string            { return proto.CompactTextString(m) }
func (*PathElem) ProtoMessage()               {}
func (*PathElem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PathElem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PathElem) GetKey() map[string]string {
	if m != nil {
		return m.Key
	}
	return nil
}

// Credentials defines credentials needed to perform authentication on a device.
type Credentials struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// Types that are valid to be assigned to Password:
	//	*Credentials_Cleartext
	//	*Credentials_Hashed
	Password isCredentials_Password `protobuf_oneof:"password"`
}

func (m *Credentials) Reset()                    { *m = Credentials{} }
func (m *Credentials) String() string            { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()               {}
func (*Credentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isCredentials_Password interface {
	isCredentials_Password()
}

type Credentials_Cleartext struct {
	Cleartext string `protobuf:"bytes,2,opt,name=cleartext,oneof"`
}
type Credentials_Hashed struct {
	Hashed *HashType `protobuf:"bytes,3,opt,name=hashed,oneof"`
}

func (*Credentials_Cleartext) isCredentials_Password() {}
func (*Credentials_Hashed) isCredentials_Password()    {}

func (m *Credentials) GetPassword() isCredentials_Password {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *Credentials) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Credentials) GetCleartext() string {
	if x, ok := m.GetPassword().(*Credentials_Cleartext); ok {
		return x.Cleartext
	}
	return ""
}

func (m *Credentials) GetHashed() *HashType {
	if x, ok := m.GetPassword().(*Credentials_Hashed); ok {
		return x.Hashed
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Credentials) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Credentials_OneofMarshaler, _Credentials_OneofUnmarshaler, _Credentials_OneofSizer, []interface{}{
		(*Credentials_Cleartext)(nil),
		(*Credentials_Hashed)(nil),
	}
}

func _Credentials_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Credentials)
	// password
	switch x := m.Password.(type) {
	case *Credentials_Cleartext:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Cleartext)
	case *Credentials_Hashed:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hashed); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Credentials.Password has unexpected type %T", x)
	}
	return nil
}

func _Credentials_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Credentials)
	switch tag {
	case 2: // password.cleartext
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Password = &Credentials_Cleartext{x}
		return true, err
	case 3: // password.hashed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashType)
		err := b.DecodeMessage(msg)
		m.Password = &Credentials_Hashed{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Credentials_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Credentials)
	// password
	switch x := m.Password.(type) {
	case *Credentials_Cleartext:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Cleartext)))
		n += len(x.Cleartext)
	case *Credentials_Hashed:
		s := proto.Size(x.Hashed)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*HashType)(nil), "gnoi.HashType")
	proto.RegisterType((*Path)(nil), "gnoi.Path")
	proto.RegisterType((*PathElem)(nil), "gnoi.PathElem")
	proto.RegisterType((*Credentials)(nil), "gnoi.Credentials")
	proto.RegisterEnum("gnoi.L3Protocol", L3Protocol_name, L3Protocol_value)
	proto.RegisterEnum("gnoi.HashType_HashMethod", HashType_HashMethod_name, HashType_HashMethod_value)
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x41, 0x8f, 0x93, 0x40,
	0x14, 0xee, 0x00, 0x22, 0x7d, 0x35, 0x2b, 0x99, 0x18, 0xc5, 0xc6, 0x98, 0x86, 0x53, 0xf5, 0xc0,
	0xa6, 0x5d, 0xdb, 0x18, 0x0f, 0x26, 0x76, 0xb7, 0xa6, 0x8d, 0xae, 0x21, 0xb3, 0xea, 0xc1, 0xdb,
	0x14, 0x9e, 0x40, 0x04, 0x86, 0xc0, 0x54, 0xe5, 0x64, 0xfc, 0x09, 0xfe, 0x63, 0x33, 0x03, 0x58,
	0x8d, 0xb7, 0xef, 0xbd, 0xf7, 0xbd, 0x8f, 0xef, 0xf1, 0x0d, 0x4c, 0x64, 0x5b, 0x61, 0x13, 0x54,
	0xb5, 0x90, 0x82, 0x5a, 0x49, 0x29, 0x32, 0xff, 0x17, 0x01, 0x67, 0xc7, 0x9b, 0xf4, 0x7d, 0x5b,
	0x21, 0x5d, 0x80, 0x5d, 0xa0, 0x4c, 0x45, 0xec, 0x91, 0x19, 0x99, 0x9f, 0x2d, 0x1f, 0x06, 0x8a,
	0x13, 0x0c, 0x73, 0x0d, 0xae, 0x35, 0x81, 0xf5, 0x44, 0x4a, 0xc1, 0x4a, 0x79, 0x93, 0x7a, 0xc6,
	0x8c, 0xcc, 0xef, 0x30, 0x8d, 0xfd, 0x97, 0x00, 0x27, 0x26, 0xbd, 0x0b, 0x93, 0x0f, 0xef, 0x6e,
	0xc2, 0xed, 0xe5, 0xfe, 0xf5, 0x7e, 0x7b, 0xe5, 0x8e, 0x28, 0x80, 0x7d, 0xb3, 0x7b, 0xb5, 0x5c,
	0xad, 0x5d, 0xd2, 0xe3, 0xd5, 0x62, 0xe9, 0x1a, 0xf4, 0x36, 0x98, 0xd7, 0x57, 0x2b, 0xd7, 0xf4,
	0x37, 0x60, 0x85, 0x5c, 0xa6, 0xf4, 0x3e, 0xd8, 0xa2, 0xce, 0x92, 0xac, 0xd4, 0xea, 0x63, 0xd6,
	0x57, 0xd4, 0x07, 0x0b, 0x73, 0x2c, 0x3c, 0x73, 0x66, 0xce, 0x27, 0xcb, 0xb3, 0xce, 0xa4, 0xda,
	0xd8, 0xe6, 0x58, 0x30, 0x3d, 0xf3, 0x7f, 0x12, 0x70, 0x86, 0x96, 0x32, 0x59, 0xf2, 0x02, 0xf5,
	0x55, 0x63, 0xa6, 0x31, 0x7d, 0x02, 0xe6, 0x17, 0x6c, 0x3d, 0x43, 0x6b, 0x3c, 0xf8, 0x57, 0x23,
	0x78, 0x83, 0xed, 0xb6, 0x94, 0x75, 0xcb, 0x14, 0x67, 0xba, 0x06, 0x67, 0x68, 0x50, 0xb7, 0x5b,
	0xeb, 0x94, 0x14, 0xa4, 0xf7, 0xe0, 0xd6, 0x57, 0x9e, 0x1f, 0xb1, 0x37, 0xd9, 0x15, 0x2f, 0x8c,
	0xe7, 0xc4, 0xff, 0x01, 0x93, 0xcb, 0x1a, 0x63, 0x2c, 0x65, 0xc6, 0xf3, 0x86, 0x4e, 0xc1, 0x39,
	0x36, 0x58, 0xff, 0xe5, 0xe4, 0x4f, 0x4d, 0x1f, 0xc3, 0x38, 0xca, 0x91, 0xd7, 0x12, 0xbf, 0xcb,
	0x4e, 0x68, 0x37, 0x62, 0xa7, 0x16, 0x9d, 0x83, 0xad, 0x7e, 0x2d, 0xc6, 0x9e, 0x39, 0x23, 0xa7,
	0xa3, 0x87, 0x64, 0x76, 0x23, 0xd6, 0xcf, 0x37, 0x00, 0x4e, 0xc5, 0x9b, 0xe6, 0x9b, 0xa8, 0xe3,
	0xa7, 0x0b, 0x80, 0xb7, 0x17, 0xa1, 0x4a, 0x3b, 0x12, 0xf9, 0xff, 0x41, 0x38, 0x60, 0xed, 0xc3,
	0x8f, 0xcf, 0x5c, 0xd2, 0xa3, 0xb5, 0x6b, 0x6c, 0x1e, 0x7d, 0x9a, 0x26, 0x99, 0x4c, 0x8f, 0x87,
	0x20, 0x12, 0xc5, 0xb9, 0xa8, 0xb0, 0x8c, 0x44, 0xf9, 0x39, 0x4b, 0xce, 0xd5, 0xf7, 0x0e, 0xb6,
	0x7e, 0x3a, 0x17, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xa3, 0x69, 0x46, 0x49, 0x02, 0x00,
	0x00,
}
